"""
    Pytest Inmanta LSM

    :copyright: 2020 Inmanta
    :contact: code@inmanta.com
    :license: Inmanta EULA
"""

import lsm
import lsm::fsm
import net

entity VlanAssignment extends lsm::ServiceEntity:
    std::ipv_any_address router_ip
    string router_ip__description="The IP address of the vyos router that should be configured."

    string interface_name
    string interface_name__description="The name of the interface that should be connected on the given VLAN."

    std::ipv_any_interface address
    string address__description="The IP-address/netmask to assign to the given VLAN interface."
    lsm::attribute_modifier address__modifier="rw+"

    net::vlan_id vlan_id
    string vlan_id__description="The VLAN ID to assign to the given interface."
    lsm::attribute_modifier vlan_id__modifier="rw+"

    string value_with_default = "default"
    string value_with_default__description = "This value has no use but has a default"
    lsm::attribute_modifier value_with_default__modifier = "rw+"
end

index VlanAssignment(router_ip, interface_name, vlan_id)

implement VlanAssignment using vlanAssignment
implement VlanAssignment using parents

implementation vlanAssignment for VlanAssignment:
    all = NullResource(
        name=interface_name,
        desired_value=router_ip,
        # Make the resource fail if the interface we used is not right
        fail=interface_name == "fake_interface",
    )
    self.resources += all
    self.owned_resources += all
end

binding = lsm::ServiceEntityBindingV2(
    service_entity="quickstart::VlanAssignment",
    lifecycle=lsm::fsm::simple,
    service_entity_name="vlan-assignment",
)

for assignment in lsm::all(binding):
    VlanAssignment(
        instance_id=assignment["id"],
        router_ip=assignment["attributes"]["router_ip"],
        interface_name=assignment["attributes"]["interface_name"],
        address=assignment["attributes"]["address"],
        vlan_id=assignment["attributes"]["vlan_id"],
        value_with_default=assignment["attributes"]["value_with_default"],
        entity_binding=binding,
    )
end


entity NullResource extends std::PurgeableResource:
    """
        A test resource for unit and integration testing purposes.

        :param skip: When set to true the handler will raise a skipresource
        :param fail: When set to true the handler will raise an exception to mark a failure
    """
    string name
    string desired_value
    bool skip=false
    bool fail=false
    string agent="internal"
    bool send_event=true
end

index NullResource(name)

implement NullResource using std::none